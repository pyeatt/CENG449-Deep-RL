\documentclass[12pt]{article}

\textwidth 6.5in
\textheight 9in
\evensidemargin 0in
\oddsidemargin 0in
\topmargin 0in
\headheight 0in
\headsep 0in

\usepackage{times}
\usepackage{hyperref}
\usepackage{tabularx}
\newcolumntype{Y}{>{\centering\arraybackslash}X}

\usepackage{graphicx}
\usepackage{color}

\usepackage{listings}
\newlength{\listwidth}
\setlength{\listwidth}{\textwidth}
\addtolength{\listwidth}{-20pt}

\newlength{\smallbasewidth}
\settowidth{\smallbasewidth}{\ttfamily\small m}
\newlength{\footnotebasewidth}
\settowidth{\footnotebasewidth}{\ttfamily\footnotesize m}
\newlength{\scriptbasewidth}
\settowidth{\scriptbasewidth}{\ttfamily\scriptsize m}

\makeatletter
\lstdefinestyle{mystyle}{
  basewidth=\footnotebasewidth,
  basicstyle=\ttfamily\lst@ifdisplaystyle\ttfamily\footnotesize\fi
}
\makeatother


\lstset{language=C,style=mystyle,frame=tlrb,framesep=10pt,linewidth=\listwidth,xleftmargin=12pt,xrightmargin=-8pt,framerule=2pt}

\begin{document}
\begin{center}
  {
  \bf\large
  South Dakota School of Mines \& Technology\\
  CENG 448/548 --- Real-Time Operating Systems\\
  Laboratory Assignment Three
  }
\end{center}

%\subsection*{Assignment}
\noindent Work individually.
The objective of this assignment is to create good driver for the 16550 UART. You will be given skeleton code with and some comments to help you get started.


\subsection*{Part 0: Record current CPU usage}

Before you begin, make sure that your previous lab code works.
Run that code for five minutes, then record the output of the statistics task.
Modify the code to print ``Hello World'' once every 25 milliseconds, and print the statistics report once every second, run it for a few minutes, and record the output of the statistics task.

\subsection*{Part 1: The transmit driver}
The transmit driver requires a lot of work.  The basic idea is to create a software state machine.  Most of the code is already written, and we will go over it in class.
You must modify
\lstinline{uart_init}, \lstinline{uart_put_char},
\lstinline{uart_write_string}, and the ISR function.
The new code will use a message queue, and a shared variable that is only
modified within critical sections (when interrupts are disabled). The
shared variable keeps track of the current state of the transmit
code.  There are three possible states:
\begin{enumerate}
  \item \lstinline{TX_EMPTY}: The transmit holding register, the
    transmit FIFO, and the transmit queue are all empty. This implies
    that there will not be a transmitter interrupt as long as the
    transmission software remains in this state.  The only way to go
    from this state to either of the other states is by calling either
    \lstinline{uart_put_char}, or \lstinline{uart_write_string}. 
    \begin{itemize}
    \item \lstinline{uart_put_char} should write the character to the
      UART FIFO, and change the state to \lstinline{TX_FIFO}.
    \item \lstinline{uart_write_string} may write up to 16 characters
      to the UART FIFO, and change the state to \lstinline{TX_FIFO}.
      If there are any remaining characters, then it should place them
      in the transmit queue and change the state to \lstinline{TX_QUEUE} If the
      queue becomes full, the function must exit the critical section
      and do a blocking write to the queue.  
    \end{itemize}
  \item \lstinline{TX_FIFO}: The transmit holding register and the
    transmit FIFO contain data, but the queue is empty.  In this
    state, \lstinline{uart_put_char} and \lstinline{uart_write_string}
    should write directly to the queue and change the state to
    \lstinline{TX_QUEUE}. If the ISR gets called in the
    \lstinline{TX_FIFO} state, it should change the state to
    \lstinline{TX_EMPTY}.
  \item \lstinline{TX_QUEUE}: The transmit holding register and the
    transmit FIFO contain data, and there is data already in the
    queue.  In this state, \lstinline{uart_put_char} and
    \lstinline{uart_write_string} should write directly to the queue.
    If the ISR gets called in the
    \lstinline{TX_QUEUE} state, it should copy up to 16 characters from the queue to the FIFO.  If the queue becomes empty, it should change the state to \lstinline{TX_FIFO}.
\end{enumerate}
The state variable must only be changed when the UART interrupt is disabled. Also, the
\lstinline{uart_put_char} and \lstinline{uart_write_string} functions must acquire the UART mutex before taking any other actions.
The software state machine is shown in Figure~\ref{fig:states}.

\begin{figure}
  \centerline{\scalebox{0.5}{\input{TX_states.pdf_t}}}
  \caption{Software state machine for the transmitter.}
  \label{fig:states}
\end{figure}

  \begin{figure}
  \centerline{\scalebox{0.5}{\input{TX_states_inefficient.pdf_t}}}
  \caption{Software state machine for the ``easy'' transmitter.}
  \label{fig:states_bad}
\end{figure}



As a first step, the transmit code can be written so that the
\lstinline{uart_write_string} function calls the
\lstinline{uart_put_char} function for each character.  In this case,
the \lstinline{uart_write_string} function only needs to acquire the
mutex, then send each character to the \lstinline{uart_put_char}
function (exactly as in the Lab 2 code), and release the mutex at the end. In other words, the driver
can be written so that the \lstinline{uart_write_string} function only
needs two additional lines (compared to the previous lab assignment),
and the software state machine is much simpler, as shown in
Figure~\ref{fig:states_bad}.  This approach is much less efficient,
but is easier to write, and would be a good starting point for further
refinement. (hint.. hint)


\subsubsection*{Part 2: The receive driver}
This code is much easier.  The ISR will be triggered when the RX FIFO is almost full, or when a timeout has occurred.  The ISR simply copies all of the data from the RX FIFO to tho RX queue.  If the queue is full, some data will be lost.  The   \lstinline{uart_get_char} function reads from the queue. The original
\lstinline{uart_read_string} function may work with very little modification; just acquire the uart mutex, call the  \lstinline{uart_get_char} function repeatedly, and release the mutex at the end.

\subsubsection*{Part 3: Comparison}
Repeat the data gathering procedure from Part 0 and report any differences between the new code and the original code.

\end{document}
